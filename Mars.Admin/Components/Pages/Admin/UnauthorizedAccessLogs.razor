@page "/admin/unauthorized-access-logs"
@using Mars.Admin.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Mars.Admin.Services
@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext DbContext
@inject IUserScope UserScope
@inject NavigationManager NavigationManager
@inject ILogger<UnauthorizedAccessLogs> Logger
@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>Unauthorized Access Logs</PageTitle>

@if (!UserScope.HasPermission("AccessLogs.Read"))
{
    <div class="alert alert-danger">
        <h4>Access Denied</h4>
        <p>You don't have permission to view unauthorized access logs.</p>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">Unauthorized Access Logs</h3>
                    <div>
                        <button class="btn btn-outline-primary" @onclick="RefreshData">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                        @if (UserScope.HasPermission("AccessLogs.Delete"))
                        {
                            <button class="btn btn-outline-danger" @onclick="ClearOldLogs">
                                <i class="bi bi-trash"></i> Clear Old Logs
                            </button>
                        }
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-muted mt-2">Loading unauthorized access logs...</p>
                        </div>
                    }
                    else if (!accessLogs.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> No unauthorized access attempts found.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>IP Address</th>
                                        <th>Attempts</th>
                                        <th>First Attempt</th>
                                        <th>Last Attempt</th>
                                        <th>User Agent</th>
                                        <th>Request Path</th>
                                        <th>Referer</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in accessLogs)
                                    {
                                        <tr>
                                            <td>
                                                <code>@log.IPAddress</code>
                                                @if (log.AccessAttempts > 10)
                                                {
                                                    <span class="badge bg-danger ms-1">High Risk</span>
                                                }
                                                else if (log.AccessAttempts > 5)
                                                {
                                                    <span class="badge bg-warning ms-1">Medium Risk</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-primary">@log.AccessAttempts</span>
                                            </td>
                                            <td>@log.FirstAttemptAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td>@log.LastAttemptAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.UserAgent))
                                                {
                                                    <small class="text-muted" title="@log.UserAgent">
                                                        @(log.UserAgent.Length > 50 ? log.UserAgent.Substring(0, 50) + "..." : log.UserAgent)
                                                    </small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.RequestPath))
                                                {
                                                    <code>@log.RequestPath</code>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.Referer))
                                                {
                                                    <small class="text-muted" title="@log.Referer">
                                                        @(log.Referer.Length > 30 ? log.Referer.Substring(0, 30) + "..." : log.Referer)
                                                    </small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    @if (UserScope.HasPermission("AccessLogs.Create") && !IsIPInSafeListing(log.IPAddress))
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" 
                                                                @onclick="() => ShowAddToSafeListingModal(log.IPAddress)"
                                                                title="Add to Safe Listing">
                                                            <i class="bi bi-shield-check"></i>
                                                        </button>
                                                    }
                                                    @if (UserScope.HasPermission("AccessLogs.Update") && IsIPInSafeListing(log.IPAddress))
                                                    {
                                                        <button class="btn btn-sm btn-outline-primary" 
                                                                @onclick="() => ShowEditSafeListingModal(log.IPAddress)"
                                                                title="Edit Safe Listing">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </button>
                                                    }
                                                    @if (UserScope.HasPermission("AccessLogs.Delete"))
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger" 
                                                                @onclick='() => ShowConfirmationModal(log.Id, "delete")'
                                                                title="Delete Log">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="mt-3">
                            <small class="text-muted">
                                Showing @accessLogs.Count unauthorized access attempts. 
                                <span class="text-danger">Red badges</span> indicate high-risk IPs (>10 attempts).
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add to Safe Listing Modal -->
@if (showAddToSafeListingModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-shield-check"></i> Add IP to Safe Listing</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddToSafeListingModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="safeListingFormModel" OnInvalidSubmit="OnInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        @if (!string.IsNullOrEmpty(addToSafeListingErrorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle"></i> @addToSafeListingErrorMessage
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">IP Address</label>
                                    <input type="text" class="form-control" @bind="safeListingFormModel.IPAddress" readonly />
                                    <div class="form-text">This IP address will be added to the safe listing.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Label</label>
                                    <input type="text" class="form-control" @bind="safeListingFormModel.Label" placeholder="Enter a descriptive label" />
                                    <div class="form-text">Optional description for this IP address.</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Expiry Date</label>
                                    <input type="date" class="form-control" @bind="safeListingFormModel.ExpiryDate" />
                                    <div class="form-text">Optional expiry date for this IP address.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="safeListingFormModel.IsActive" />
                                        <label class="form-check-label">Active</label>
                                    </div>
                                    <div class="form-text">Whether this IP address is currently active in the safe listing.</div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Warning:</strong> Adding this IP address to the safe listing will allow it to access the system. 
                            Make sure you trust this IP address before proceeding.
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddToSafeListingModal">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="AddToSafeListing">
                        <i class="bi bi-shield-check"></i> Add to Safe Listing
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Safe Listing Modal -->
@if (showEditSafeListingModal && selectedSafeListing != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-pencil-square"></i> Edit Safe Listing</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditSafeListingModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editSafeListingFormModel" OnInvalidSubmit="OnInvalidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        
                        @if (!string.IsNullOrEmpty(editSafeListingErrorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle"></i> @editSafeListingErrorMessage
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">IP Address</label>
                                    <input type="text" class="form-control" @bind="editSafeListingFormModel.IPAddress" readonly />
                                    <div class="form-text">IP address cannot be changed.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Label</label>
                                    <input type="text" class="form-control" @bind="editSafeListingFormModel.Label" placeholder="Enter a descriptive label" />
                                    <div class="form-text">Optional description for this IP address.</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Expiry Date</label>
                                    <input type="date" class="form-control" @bind="editSafeListingFormModel.ExpiryDate" />
                                    <div class="form-text">Optional expiry date for this IP address.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="editSafeListingFormModel.IsActive" />
                                        <label class="form-check-label">Active</label>
                                    </div>
                                    <div class="form-text">Whether this IP address is currently active in the safe listing.</div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            <strong>Info:</strong> You can deactivate this IP address to temporarily block access without deleting it.
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditSafeListingModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateSafeListing">
                        <i class="bi bi-check-lg"></i> Update Safe Listing
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirmation Modal -->
@if (showConfirmationModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (confirmationAction == "delete")
                        {
                            <text><i class="bi bi-exclamation-triangle text-danger"></i> Confirm Delete</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmationModal"></button>
                </div>
                <div class="modal-body">
                    @if (confirmationAction == "delete")
                    {
                        <p>Are you sure you want to delete this unauthorized access log?</p>
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Warning:</strong> This action cannot be undone. The log entry will be permanently removed.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConfirmationModal">Cancel</button>
                    @if (confirmationAction == "delete")
                    {
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteLog">
                            <i class="bi bi-trash"></i> Delete Log
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AuditLogsIPSafelisting> accessLogs = new();
    private Dictionary<string, bool> ipSafeListingStatus = new(); // Track which IPs are already in safe listing
    private bool isLoading = true;

    // Modal states
    private bool showAddToSafeListingModal = false;
    private bool showEditSafeListingModal = false;
    private bool showConfirmationModal = false;
    private string confirmationAction = "";
    private int? confirmationLogId = null;

    // Form models
    private SafeListingFormModel safeListingFormModel = new();
    private SafeListingFormModel editSafeListingFormModel = new();
    private IPSafeListing? selectedSafeListing = null;

    // Error messages
    private string addToSafeListingErrorMessage = "";
    private string editSafeListingErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (!UserScope.HasPermission("AccessLogs.Read"))
        {
            NavigationManager.NavigateTo("/access-denied");
            return;
        }

        await LoadAccessLogs();
    }

    private async Task LoadAccessLogs()
    {
        try
        {
            isLoading = true;
            accessLogs = await DbContext.AuditLogsIPSafelistings
                .Where(log => log.IsActive)
                .OrderByDescending(log => log.LastAttemptAt)
                .ThenByDescending(log => log.AccessAttempts)
                .Take(100) // Limit to 100 most recent/active logs
                .ToListAsync();

            // Check which IPs are already in safe listing
            await CheckIPSafeListingStatus();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading access logs");
            accessLogs = new List<AuditLogsIPSafelisting>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadAccessLogs();
    }

    private async Task CheckIPSafeListingStatus()
    {
        try
        {
            ipSafeListingStatus.Clear();
            
            // Get unique IP addresses from access logs
            var uniqueIPs = accessLogs.Select(log => log.IPAddress).Distinct().ToList();
            
            if (uniqueIPs.Any())
            {
                // Check which IPs are already in safe listing
                var safeListedIPs = await DbContext.IPSafeListings
                    .Where(sl => sl.IsActive && (sl.ExpiryDate == null || sl.ExpiryDate > DateTime.UtcNow))
                    .Select(sl => sl.IPAddress)
                    .ToListAsync();

                // Create dictionary to track safe listing status
                foreach (var ip in uniqueIPs)
                {
                    ipSafeListingStatus[ip] = safeListedIPs.Contains(ip);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking IP safe listing status");
            // If there's an error, assume no IPs are in safe listing to be safe
            foreach (var ip in accessLogs.Select(log => log.IPAddress).Distinct())
            {
                ipSafeListingStatus[ip] = false;
            }
        }
    }

    private async Task ClearOldLogs()
    {
        if (!UserScope.HasPermission("AccessLogs.Delete"))
            return;

        try
        {
            // Clear logs older than 30 days
            var cutoffDate = DateTime.UtcNow.AddDays(-30);
            var oldLogs = await DbContext.AuditLogsIPSafelistings
                .Where(log => log.LastAttemptAt < cutoffDate)
                .ToListAsync();

            if (oldLogs.Any())
            {
                DbContext.AuditLogsIPSafelistings.RemoveRange(oldLogs);
                await DbContext.SaveChangesAsync();
                await LoadAccessLogs(); // Refresh the display
                
                Logger.LogInformation("Cleared {Count} old access logs", oldLogs.Count);
            }
            else
            {
                Logger.LogInformation("No old logs found to clear");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing old logs");
            Logger.LogError("Failed to clear old logs");
        }
    }

    // Modal management methods
    private void ShowAddToSafeListingModal(string ipAddress)
    {
        if (!UserScope.HasPermission("AccessLogs.Create"))
            return;

        safeListingFormModel = new SafeListingFormModel
        {
            IPAddress = ipAddress,
            Label = $"Added from unauthorized access log - {DateTime.UtcNow:yyyy-MM-dd}",
            IsActive = true
        };
        addToSafeListingErrorMessage = "";
        showAddToSafeListingModal = true;
    }

    private void CloseAddToSafeListingModal()
    {
        showAddToSafeListingModal = false;
        safeListingFormModel = new();
        addToSafeListingErrorMessage = "";
    }

    private async Task ShowEditSafeListingModal(string ipAddress)
    {
        if (!UserScope.HasPermission("AccessLogs.Update"))
            return;

        try
        {
            selectedSafeListing = await DbContext.IPSafeListings
                .FirstOrDefaultAsync(sl => sl.IPAddress == ipAddress);

            if (selectedSafeListing != null)
            {
                editSafeListingFormModel = new SafeListingFormModel
                {
                    IPAddress = selectedSafeListing.IPAddress,
                    Label = selectedSafeListing.Label ?? "",
                    ExpiryDate = selectedSafeListing.ExpiryDate,
                    IsActive = selectedSafeListing.IsActive
                };
                editSafeListingErrorMessage = "";
                showEditSafeListingModal = true;
            }
            else
            {
                Logger.LogInformation("IP address {IPAddress} is not in the safe listing", ipAddress);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading safe listing for edit");
            Logger.LogError("Failed to load safe listing details");
        }
    }

    private void CloseEditSafeListingModal()
    {
        showEditSafeListingModal = false;
        selectedSafeListing = null;
        editSafeListingFormModel = new();
        editSafeListingErrorMessage = "";
    }

    private void ShowConfirmationModal(int logId, string action)
    {
        confirmationLogId = logId;
        confirmationAction = action;
        showConfirmationModal = true;
    }

    private void CloseConfirmationModal()
    {
        showConfirmationModal = false;
        confirmationLogId = null;
        confirmationAction = "";
    }

    // Action methods
    private async Task AddToSafeListing()
    {
        if (!UserScope.HasPermission("AccessLogs.Create"))
            return;

        try
        {
            // Check if IP already exists in safe listing
            var existingSafeListing = await DbContext.IPSafeListings
                .FirstOrDefaultAsync(sl => sl.IPAddress == safeListingFormModel.IPAddress);

            if (existingSafeListing != null)
            {
                addToSafeListingErrorMessage = "This IP address is already in the safe listing.";
                return;
            }

            // Add to safe listing
            var safeListing = new IPSafeListing
            {
                IPAddress = safeListingFormModel.IPAddress,
                Label = safeListingFormModel.Label,
                ExpiryDate = safeListingFormModel.ExpiryDate,
                UserId = null, // Office IP
                IsActive = safeListingFormModel.IsActive,
                CreatedAt = DateTime.UtcNow,
                CreatedByUserId = UserScope.UserId ?? "System"
            };

            DbContext.IPSafeListings.Add(safeListing);

            // Mark the audit log as inactive
            var auditLog = await DbContext.AuditLogsIPSafelistings
                .FirstOrDefaultAsync(log => log.IPAddress == safeListingFormModel.IPAddress && log.IsActive);
            
            if (auditLog != null)
            {
                auditLog.IsActive = false;
                auditLog.UpdatedAt = DateTime.UtcNow;
                auditLog.UpdatedByUserId = UserScope.UserId ?? "System";
            }

            await DbContext.SaveChangesAsync();
            CloseAddToSafeListingModal();
            await LoadAccessLogs(); // Refresh the display
            
            Logger.LogInformation("IP address {IPAddress} has been added to the safe listing", safeListingFormModel.IPAddress);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding to safe listing");
            addToSafeListingErrorMessage = "Failed to add IP address to safe listing. Please try again.";
        }
    }

    private async Task UpdateSafeListing()
    {
        if (!UserScope.HasPermission("AccessLogs.Update") || selectedSafeListing == null)
            return;

        try
        {
            selectedSafeListing.Label = editSafeListingFormModel.Label;
            selectedSafeListing.ExpiryDate = editSafeListingFormModel.ExpiryDate;
            selectedSafeListing.IsActive = editSafeListingFormModel.IsActive;
            selectedSafeListing.ModifiedAt = DateTime.UtcNow;
            selectedSafeListing.ModifiedByUserId = UserScope.UserId ?? "System";

            await DbContext.SaveChangesAsync();
            CloseEditSafeListingModal();
            
            Logger.LogInformation("Safe listing for IP address {IPAddress} has been updated", editSafeListingFormModel.IPAddress);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating safe listing");
            editSafeListingErrorMessage = "Failed to update safe listing. Please try again.";
        }
    }

    private async Task ConfirmDeleteLog()
    {
        if (!UserScope.HasPermission("AccessLogs.Delete") || !confirmationLogId.HasValue)
            return;

        try
        {
            var log = await DbContext.AuditLogsIPSafelistings.FindAsync(confirmationLogId.Value);
            if (log != null)
            {
                DbContext.AuditLogsIPSafelistings.Remove(log);
                await DbContext.SaveChangesAsync();
                CloseConfirmationModal();
                await LoadAccessLogs(); // Refresh the display
                
                Logger.LogInformation("Unauthorized access log has been deleted");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting log");
            Logger.LogError("Failed to delete log entry");
        }
    }

    private void OnInvalidSubmit()
    {
        // Handle form validation errors
    }

    private bool IsIPInSafeListing(string ipAddress)
    {
        return ipSafeListingStatus.TryGetValue(ipAddress, out bool isInSafeListing) && isInSafeListing;
    }

    // Form model class
    public class SafeListingFormModel
    {
        [Required]
        [MaxLength(45)]
        public string IPAddress { get; set; } = string.Empty;

        [MaxLength(200)]
        public string Label { get; set; } = string.Empty;

        public DateTime? ExpiryDate { get; set; }

        public bool IsActive { get; set; } = true;
    }
}
